/* Generated By:JavaCC: Do not edit this line. Parse.java */
    package Parse;
    import java.util.LinkedList;
    import java.util.List;
    import Absyn.*;

        public class Parse implements ParseConstants {

/* Grammar */
  static final public Program Program() throws ParseException {
    ClassDecl cd;
    LinkedList<ClassDecl> classDeclarations = new LinkedList<ClassDecl>();
    cd = MainClassDeclaration();
                                  classDeclarations.add(cd);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cd = SubClassDecl();
                                                                                       classDeclarations.add(cd);
    }
    jj_consume_token(0);
            {if (true) return new Program(classDeclarations);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl MainClassDeclaration() throws ParseException {
        Token name;
        LinkedList<VarDecl> fields = new LinkedList<VarDecl>();
        LinkedList<Stmt> stmts = new LinkedList<Stmt>();
        LinkedList<MethodDecl> m = new LinkedList<MethodDecl>();
        LinkedList<Formal> args = new LinkedList<Formal>();
        VarDecl v;
        Stmt s;

    LinkedList<VarDecl> noFieldsForMainMethod = new LinkedList<VarDecl>();

        Token arg;
    jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    jj_consume_token(40);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(41);
    jj_consume_token(STRING_RESERVED_WORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      break;
    case 43:
      jj_consume_token(43);
      jj_consume_token(44);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    arg = jj_consume_token(ID);
    jj_consume_token(45);
    jj_consume_token(40);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      v = VarDeclaration();
                                                                                                                                                                fields.add(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case XINU:
      case ID:
      case 40:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      s = Statement();
                                                                                                                                                                                                      stmts.add(s);
    }
    jj_consume_token(46);
    jj_consume_token(46);
                args.add(new Formal(new ArrayType(new IdentifierType("String")), arg.image));
                            m.add(new MethodDecl(null, false, "main", args, fields, stmts, new IntegerLiteral(0) ));
                            {if (true) return new ClassDecl(noFieldsForMainMethod, m, name.image, "null");}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl SubClassDecl() throws ParseException {
        Token name;
        String parent;
        LinkedList<VarDecl> varDeclarations = new LinkedList<VarDecl>();
        VarDecl v;
        LinkedList<MethodDecl> methodDeclarations = new LinkedList<MethodDecl>();
        MethodDecl m;
    jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    parent = ExtendStm();
    jj_consume_token(40);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case PUBLIC:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:
        v = FieldDeclaration();
                                                                            varDeclarations.add(v);
                                                                                                       v = FieldDeclaration(); varDeclarations.add(v);
        break;
      case PUBLIC:
        m = MethodDeclaration();
                                                                                                                                                                                   methodDeclarations.add(m);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(46);
    if(parent.equals("Thread"))
                {if (true) return new ThreadDecl(name.image, varDeclarations,methodDeclarations);}
        else
                {if (true) return new ClassDecl(varDeclarations, methodDeclarations, name.image, parent);}
    throw new Error("Missing return statement in function");
  }

  static final public String ExtendStm() throws ParseException {
        String className = "null";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      className = ClassName();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
          {if (true) return className;}
    throw new Error("Missing return statement in function");
  }

  static final public String ClassName() throws ParseException {
        Token className;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THREAD:
      jj_consume_token(THREAD);
               {if (true) return "Thread";}
      break;
    case ID:
      className = jj_consume_token(ID);
                       {if (true) return className.image;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl FieldDeclaration() throws ParseException {
        Type t;
        Token id;
    t = Type();
    id = jj_consume_token(ID);
    jj_consume_token(47);
                              {if (true) return new VarDecl(t, id.image, null);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDeclaration() throws ParseException {
        Type t;
        Token id;
        Expr e = null;
    t = Type();
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      e = VarDecEnd();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(47);
                                           {if (true) return new VarDecl(t, id.image, e);}
    throw new Error("Missing return statement in function");
  }

  static final public Expr VarDecEnd() throws ParseException {
        Expr e = null;
    jj_consume_token(48);
    e = Expression();
                             {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
        MethodDecl m;
    jj_consume_token(PUBLIC);
    m = MethodPrime();
                                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodPrime() throws ParseException {
        Type returnType;
        Token name;
        boolean synced = false;
        LinkedList<Formal> params = new LinkedList<Formal>();
        LinkedList<VarDecl> locals = new LinkedList<VarDecl>();
        LinkedList<Stmt> stmts = new LinkedList<Stmt>();
        Expr returnVal = null;

        Type temp;
        Token VarTemp;
        VarDecl v;
        Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case ID:
      returnType = Type();
      name = jj_consume_token(ID);
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                                                          synced = true;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:
        temp = Type();
        VarTemp = jj_consume_token(ID);
                                                                                                           params.add(new Formal(temp, VarTemp.image));
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(49);
          temp = Type();
          VarTemp = jj_consume_token(ID);
                                                                                                                                                                                             params.add(new Formal(temp, VarTemp.image));
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(45);
      jj_consume_token(40);
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        v = VarDeclaration();
                                                                                                                                                                                                                                                                                             locals.add(v);
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case XINU:
        case ID:
        case 40:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        s = Statement();
                                                                                                                                                                                                                                                                                                                                    stmts.add(s);
      }
      jj_consume_token(RETURN);
      returnVal = Expression();
      jj_consume_token(47);
      jj_consume_token(46);
                 {if (true) return new MethodDecl(returnType, synced, name.image, params, locals, stmts, returnVal);}
      break;
    case VOID:
      jj_consume_token(VOID);
      name = jj_consume_token(ID);
      jj_consume_token(41);
      jj_consume_token(45);
      jj_consume_token(40);
      label_8:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_8;
        }
        v = VarDeclaration();
                                                                        locals.add(v);
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case XINU:
        case ID:
        case 40:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        s = Statement();
                                                                                                               stmts.add(s);
      }
      jj_consume_token(46);
                                                                                                                                       {if (true) return new VoidDecl(name.image, locals, stmts);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stmt Statement() throws ParseException {
        LinkedList<Stmt> stmts = new LinkedList<Stmt>();
        Stmt s1;
        Stmt s2 = null;
        Expr e1;
    Expr e2;
    AssignableExpr ae;
        XinuCallStmt x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case XINU:
        case ID:
        case 40:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_10;
        }
        s1 = Statement();
                            stmts.add(s1);
      }
      jj_consume_token(46);
        /*if (stmts.isEmpty())
            return null;
        else*/
            {if (true) return new BlockStmt(stmts);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(41);
      e1 = Expression();
      jj_consume_token(45);
      s1 = Statement();
      if (jj_2_4(2)) {
        jj_consume_token(ELSE);
        s2 = Statement();
      } else {
        ;
      }
                                                                                                  {if (true) return new IfStmt(e1,s1,s2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(41);
      e1 = Expression();
      jj_consume_token(45);
      s1 = Statement();
                                                        {if (true) return new WhileStmt(e1,s1);}
      break;
    case ID:
      ae = AssignExpression();
      jj_consume_token(48);
      e2 = StatementPrime();
      jj_consume_token(47);
                                                           {if (true) return new AssignStmt(ae, e2);}
      break;
    case XINU:
      x = XinuStatement();
      jj_consume_token(47);
                             {if (true) return x;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr StatementPrime() throws ParseException {
        Expr e;
        XinuCallExpr x1;
        XinuCallStmt x2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NUM:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case ID:
    case STRING:
    case 41:
    case 57:
      e = Expression();
                      {if (true) return e;}
      break;
    case XINU:
      x2 = XinuStatement();
                          {if (true) return new XinuCallExpr(x2.method, x2.args);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public XinuCallStmt XinuStatement() throws ParseException {
    Token method;
    LinkedList<Expr> args = new LinkedList<Expr>();
    /*List expressionList = new LinkedList();*/
    Expr e;
    jj_consume_token(XINU);
    jj_consume_token(50);
    method = jj_consume_token(ID);
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NUM:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case ID:
    case STRING:
    case 41:
    case 57:
      e = Expression();
                                                      args.add(e);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
        jj_consume_token(49);
        e = Expression();
                                                                                              args.add(e);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(45);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      XinuStatementPrime();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
          {if (true) return new XinuCallStmt(method.image, args);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignableExpr AssignExpression() throws ParseException {
    Token e1;
    Token F = null;
    AssignableExpr e2 = null;
    AssignableExpr e3 = null;
    /*e1 = <ID> {e2 = new IdentifierExpr(e1.image);} ( e3 = ArrayE1(e2) )? [e3 = AssignExpression1(e2)] {if(e3 == null) return e2;
    												       else return e3;}*/
    
        e1 = jj_consume_token(ID);
               e2 = new IdentifierExpr(e1.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      e3 = ArrayE1(e2);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                                                                          if(e3 == null) {if (true) return e2;} else {if (true) return e3;}
    throw new Error("Missing return statement in function");
  }

/*AssignableExpr AssignExpression1(Expr in) :
{
	Token t;
	Expr e;
}
{
    "." t = <ID> {return new FieldExpr(in, t.image);}
}*/
  static final public Expr XinuStatementPrime() throws ParseException {
        Expr e;
    jj_consume_token(48);
    e = Expression();
                           {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expression() throws ParseException {
        Expr e1;
        Expr e2;
    e1 = NewE();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      e1 = Expression1(e1);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
                                              {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/*Expr ParenExp() :
{
	Expr e;
}
{
	"(" e = Expression() ")" [e = AnotherNonTerm(e)] {return e;}
}

Expr AnotherNonTerm(Expr e1) :
{
	Expr e2 = null;
}
{


   e2 = Term1(e1) {return e2;}
|  e2 = Equal1(e1) {return e2;}
|  e2 = Factor1(e1) {return e2;}
|  e2 = Arith1(e1) {return e2;}
|  e2 = MulDiv1(e1) {return e2;}
}*/
  static final public Expr NewE() throws ParseException {
    Expr e  = null;
    Type t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      t = Type();
      e = NewE1(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        e = Expression1(e);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      {if (true) return e;}
      break;
    case MINUS:
    case NUM:
    case FALSE:
    case NULL:
    case THIS:
    case TRUE:
    case ID:
    case STRING:
    case 41:
    case 57:
      e = Term();
                {if (true) return e;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr NewE1(Type input) throws ParseException {
    LinkedList<Expr> l = new LinkedList<Expr>();
    Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      jj_consume_token(45);
             {if (true) return new NewObjectExpr(input);}
      break;
    case 43:
      jj_consume_token(43);
      e = Expression();
                          l.add(e); e = null;
      jj_consume_token(44);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
        jj_consume_token(42);
                                                         l.add(e);
      }
                                                                       {if (true) return new NewArrayExpr(input, l);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expression1(Expr e1) throws ParseException {
        LinkedList<Expr> e2 = new LinkedList<Expr>();
        Token s;
    boolean isCall = false;
    s = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      e2 = Expression2();
                                    isCall = true;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                                                       if(!isCall)
                                                        {if (true) return new FieldExpr(e1,s.image);}
                                                       else
                                                        {if (true) return new CallExpr(e1, s.image, e2);}
    throw new Error("Missing return statement in function");
  }

  static final public LinkedList<Expr> Expression2() throws ParseException {
        LinkedList<Expr> args = new LinkedList<Expr>();
        Expr e;
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NUM:
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case ID:
    case STRING:
    case 41:
    case 57:
      e = Expression();
                            args.add(e);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_13;
        }
        jj_consume_token(49);
        e = Expression();
                                                                args.add(e);
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(45);
                                                                                        {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Term() throws ParseException {
        Expr e1;
    e1 = Equal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
    case 52:
      e1 = Term1(e1);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Term1(Expr e1) throws ParseException {
        Expr e2;
        Expr e3;
        Expr e4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      e2 = Equal();
                       e3 = new AndExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
      case 52:
        e4 = Term1(e3);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
                                                                    if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    case 52:
      jj_consume_token(52);
      e2 = Equal();
                       e3 = new OrExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
      case 52:
        e4 = Term1(e3);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
                                                                    if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Equal() throws ParseException {
        Expr e1;
    e1 = Factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
    case 54:
      e1 = Equal1(e1);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
                                          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Equal1(Expr e1) throws ParseException {
        Expr e2;
        Expr e3;
        Expr e4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
      jj_consume_token(53);
      e2 = Factor();
                        e3 = new EqualExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
      case 54:
        e4 = Equal1(e3);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
                                                                          if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    case 54:
      jj_consume_token(54);
      e2 = Factor();
                        e3 = new NotEqExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
      case 54:
        e4 = Equal1(e3);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
                                                                          if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Factor() throws ParseException {
        Expr e1;
    e1 = Arith();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
    case 56:
      e1 = Factor1(e1);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
                                       {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Factor1(Expr e1) throws ParseException {
        Expr e2;
        Expr e3;
        Expr e4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      e2 = Arith();
                     e3 = new LesserExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 56:
        e4 = Factor1(e3);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
                                                                        if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    case 56:
      jj_consume_token(56);
      e2 = Arith();
                      e3 =  new GreaterExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 56:
        e4 = Factor1(e3);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
                                                                           if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Arith() throws ParseException {
        Expr e1;
    e1 = MulDiv();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      e1 = Arith1(e1);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
                                       {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/*Expr Arith1(Expr e1) :
{
	Expr e2;
}
{
    "+" e2 = MulDiv() [ e2 = Arith1(e2) ] {return new AddExpr(e1,e2);}
|   "-" e2 = MulDiv() [ e2 = Arith1(e2) ] {return new SubExpr(e1,e2);}
}*/
  static final public Expr Arith1(Expr e1) throws ParseException {
        Expr e2;
        Expr e3;
        Expr e4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      e2 = MulDiv();
                       e3 = new AddExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        e4 = Arith1(e3);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
                                                                     if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      e2 = MulDiv();
                       e3 = new SubExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        e4 = Arith1(e3);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
                                                                     if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else {if (true) return e3;}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*Expr Arith1(Expr e1) :
{
	Expr e2;
}
{
    "+" e2 = PaulsCrazyIdea() {return new AddExpr(e1,e2);}
|   "-" e2 = PaulsCrazyIdea() {return new SubExpr(e1,e2);}
}

Expr PaulsCrazyIdea() :
{
	Expr e3;
}
{
	Factor() Arith1()
|	Factor() MulDiv()
}*/
  static final public Expr MulDiv() throws ParseException {
        Expr e1;
    e1 = ArrayE();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      e1 = MulDiv1(e1);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
                                        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr MulDiv1(Expr e1) throws ParseException {
        Expr e2;
        Expr e3;
        Expr e4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      e2 = ArrayE();
                       e3 = new MulExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        e4 = MulDiv1(e3);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
                                                                       if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else
                                                                        {if (true) return e3;}
      break;
    case DIV:
      jj_consume_token(DIV);
      e2 = ArrayE();
                       e3 = new DivExpr(e1,e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        e4 = MulDiv1(e3);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
                                                                      if(e4 != null)
                                                                        {if (true) return e4;}
                                                                     else
                                                                        {if (true) return e3;}
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr ArrayE() throws ParseException {
    Expr ae = null;
    Expr e = null;
    ae = Unary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      e = ArrayE1(ae);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
                                       if (e==null)
                                        {if (true) return ae;}
                                    else
                                        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Unary() throws ParseException {
   Expr e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      e = Lowest();
                      {if (true) return new NotExpr(e);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      e = Lowest();
                      {if (true) return new NegExpr(e);}
      break;
    case NUM:
    case FALSE:
    case NULL:
    case THIS:
    case TRUE:
    case ID:
    case STRING:
    case 41:
      e = Lowest();
                  {if (true) return e;}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public AssignableExpr ArrayE1(Expr in) throws ParseException {
    Expr e = null;
    jj_consume_token(43);
    e = Expression();
    jj_consume_token(44);
                               {if (true) return new ArrayExpr(in, e);}
    throw new Error("Missing return statement in function");
  }

/*
Expr NewE2(Type passedin) :
{
    LinkedList<Expr> l = new LinkedList<Expr>();
    Expr e = null;
    Expr returnE;
}
{
    "(" ")"                             { return new NewObjectExpr(passedin) ; }
|   "[" e = Expression() /*{l.add(e);}"]" ( "[]" )*  "]" [LOOKAHEAD(3) returnE = NewE2( passedin)]   { return new NewArrayExpr(passedin, l) ; }
}
*/
  static final public Type Type() throws ParseException {
    Type t;
    boolean AType = false;
    t = NormalType();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_14;
      }
      t = Brackets(t);
    }
        /*if (AType) 
            return new ArrayType(t); 
        else */
            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type Brackets(Type t) throws ParseException {
    jj_consume_token(42);
          {if (true) return new ArrayType(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Type NormalType() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                 {if (true) return new BooleanType();}
      break;
    case INT:
      jj_consume_token(INT);
                 {if (true) return new IntegerType();}
      break;
    case ID:
      t = jj_consume_token(ID);
                 {if (true) return new IdentifierType(t.image);}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*void TypePrime() :
{}
{
    "[" "]" ("[""]")*
}*/
  static final public Expr Lowest() throws ParseException {
    Token name;
    Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      name = jj_consume_token(ID);
                         {if (true) return new IdentifierExpr( name.image );}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                  {if (true) return new TrueExpr();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return new FalseExpr();}
      break;
    case THIS:
      jj_consume_token(THIS);
                  {if (true) return new ThisExpr();}
      break;
    case NULL:
      jj_consume_token(NULL);
                  {if (true) return new NullExpr();}
      break;
    case NUM:
      name = jj_consume_token(NUM);
                         {if (true) return new IntegerLiteral( Integer.parseInt(name.image) );}
      break;
    case STRING:
      name = jj_consume_token(STRING);
                         {if (true) return new StringLiteral( name.image );}
      break;
    case 41:
      jj_consume_token(41);
      e = Expression();
      jj_consume_token(45);
                              {if (true) return e;}
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(XINU)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[54];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x0,0x40000,0x1082000,0x1082000,0x10000,0x40000000,0x0,0x10000000,0x0,0x82000,0x40000,0x40000,0x82000,0x40000,0x40000,0xa0c21200,0x0,0xa0c21200,0x0,0x0,0x0,0x0,0xa0c21200,0x0,0x0,0x0,0x0,0xa0c21200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x300,0x300,0x300,0xc00,0xc00,0xc00,0xc00,0x0,0xa0821200,0x0,0x82000,0xa0821000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xc00,0x10e,0x8,0x8,0x0,0x8,0x10000,0x0,0x20000,0x8,0x10e,0x10e,0x9,0x10e,0x10e,0x200028c,0x20000,0x2000288,0x10000,0x800,0x40000,0x8,0x2000288,0x400,0xa00,0x200,0x20000,0x2000288,0x180000,0x180000,0x180000,0x180000,0x600000,0x600000,0x600000,0x600000,0x1800000,0x1800000,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x2000288,0x400,0x8,0x288,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parse(ParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 54; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                           }
